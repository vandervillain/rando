name: Publish
on:
  push:
    branches:
    - master
  pull_request:
    branches:
      - master
#   #release:
#     #types: [published]
env:
  AZURE_FUNCTIONAPP_NAME: your-app-name  # set this to your application's name
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'    # set this to the path to your web app project, defaults to the repository root
  DOTNET_VERSION: '2.2.402'              # set this to the dotnet version to use
jobs:
  test:
    name: Test
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: microsoft/playwright-github-action@v1

      - name: Inject Server Environment Variables
        run: echo "${{ secrets.SERVER_ENV_VARIABLES }}" > server/.env

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: '14.16.0'

      - name: Install Dependencies
        run: yarn --frozen-lockfile && yarn install-dependencies

      - name: Build
        run: yarn build

      - name: Test
        run: yarn test

      - name: Publish Artifacts
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: Test Results
          path: client/tests/screenshots
  publish:
    name: Publish Image to Docker Hub
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Inject Server Environment Variables
        run: echo "${{ secrets.SERVER_ENV_VARIABLES }}" > server/.env

      - name: Build containers
        run: docker-compose down && docker-compose build

      - name: Login to Docker
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}

      - name: Push to Docker
        run: docker-compose push
  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: [publish]
    steps:
      - name: SSH into DigitalOcean, pull and dock
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.SSH_HOST}}
          key: ${{secrets.SSH_KEY}}
          username: ${{secrets.SSH_USERNAME}}
          script_stop: true
          script: |
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_TOKEN }}
            rm -rf rando
            git clone https://github.com/vandervillain/rando.git
            cd rando
            echo "${{ secrets.SERVER_ENV_VARIABLES }}" > server/.env
            yarn docker:refresh
  # deploy-azure-function:
  #   runs-on: windows-latest
  #   environment: dev
  #   steps:
  #   - name: 'Checkout GitHub Action'
  #     uses: actions/checkout@master

  #   - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
  #     uses: actions/setup-dotnet@v1
  #     with:
  #       dotnet-version: ${{ env.DOTNET_VERSION }}

  #   - name: 'Resolve Project Dependencies Using Dotnet'
  #     shell: pwsh
  #     run: |
  #       pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
  #       dotnet build --configuration Release --output ./output
  #       popd

  #   - name: 'Run Azure Functions Action'
  #     uses: Azure/functions-action@v1
  #     id: fa
  #     with:
  #       app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
  #       package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
  #       publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}
  jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.301'
          include-prerelease: true

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: windows-latest
    needs: build
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'rando'
          slot-name: 'production'
          publish-profile: ${{ secrets.AzureAppService_PublishProfile_1234 }}
          package: .